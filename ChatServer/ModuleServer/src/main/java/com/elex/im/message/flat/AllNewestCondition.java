// automatically generated by the FlatBuffers compiler, do not modify

package com.elex.im.message.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class AllNewestCondition extends Table {
  public static AllNewestCondition getRootAsAllNewestCondition(ByteBuffer _bb) { return getRootAsAllNewestCondition(_bb, new AllNewestCondition()); }
  public static AllNewestCondition getRootAsAllNewestCondition(ByteBuffer _bb, AllNewestCondition obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public AllNewestCondition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String regionRoomId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionRoomIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String unionRoomId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unionRoomIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createAllNewestCondition(FlatBufferBuilder builder,
      int regionRoomIdOffset,
      int unionRoomIdOffset) {
    builder.startObject(2);
    AllNewestCondition.addUnionRoomId(builder, unionRoomIdOffset);
    AllNewestCondition.addRegionRoomId(builder, regionRoomIdOffset);
    return AllNewestCondition.endAllNewestCondition(builder);
  }

  public static void startAllNewestCondition(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addRegionRoomId(FlatBufferBuilder builder, int regionRoomIdOffset) { builder.addOffset(0, regionRoomIdOffset, 0); }
  public static void addUnionRoomId(FlatBufferBuilder builder, int unionRoomIdOffset) { builder.addOffset(1, unionRoomIdOffset, 0); }
  public static int endAllNewestCondition(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

