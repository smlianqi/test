// automatically generated by the FlatBuffers compiler, do not modify

package com.elex.im.message.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TranslationMessageDown extends Table {
  public static TranslationMessageDown getRootAsTranslationMessageDown(ByteBuffer _bb) { return getRootAsTranslationMessageDown(_bb, new TranslationMessageDown()); }
  public static TranslationMessageDown getRootAsTranslationMessageDown(ByteBuffer _bb, TranslationMessageDown obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TranslationMessageDown __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String roomId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer roomIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public long order() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public MessageContent translation(int j) { return translation(new MessageContent(), j); }
  public MessageContent translation(MessageContent obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int translationLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public long roomType() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean isActive() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createTranslationMessageDown(FlatBufferBuilder builder,
      int roomIdOffset,
      long order,
      int translationOffset,
      long roomType,
      boolean isActive) {
    builder.startObject(5);
    TranslationMessageDown.addOrder(builder, order);
    TranslationMessageDown.addRoomType(builder, roomType);
    TranslationMessageDown.addTranslation(builder, translationOffset);
    TranslationMessageDown.addRoomId(builder, roomIdOffset);
    TranslationMessageDown.addIsActive(builder, isActive);
    return TranslationMessageDown.endTranslationMessageDown(builder);
  }

  public static void startTranslationMessageDown(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addRoomId(FlatBufferBuilder builder, int roomIdOffset) { builder.addOffset(0, roomIdOffset, 0); }
  public static void addOrder(FlatBufferBuilder builder, long order) { builder.addLong(1, order, 0L); }
  public static void addTranslation(FlatBufferBuilder builder, int translationOffset) { builder.addOffset(2, translationOffset, 0); }
  public static int createTranslationVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTranslationVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRoomType(FlatBufferBuilder builder, long roomType) { builder.addInt(3, (int)roomType, (int)0L); }
  public static void addIsActive(FlatBufferBuilder builder, boolean isActive) { builder.addBoolean(4, isActive, false); }
  public static int endTranslationMessageDown(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

