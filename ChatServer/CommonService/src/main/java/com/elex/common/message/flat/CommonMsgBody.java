// automatically generated by the FlatBuffers compiler, do not modify

package com.elex.common.message.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CommonMsgBody extends Table {
  public static CommonMsgBody getRootAsCommonMsgBody(ByteBuffer _bb) { return getRootAsCommonMsgBody(_bb, new CommonMsgBody()); }
  public static CommonMsgBody getRootAsCommonMsgBody(ByteBuffer _bb, CommonMsgBody obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public CommonMsgBody __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long version() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long commandId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int content(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int contentLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer contentAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }

  public static int createCommonMsgBody(FlatBufferBuilder builder,
      long version,
      long commandId,
      int contentOffset) {
    builder.startObject(3);
    CommonMsgBody.addContent(builder, contentOffset);
    CommonMsgBody.addCommandId(builder, commandId);
    CommonMsgBody.addVersion(builder, version);
    return CommonMsgBody.endCommonMsgBody(builder);
  }

  public static void startCommonMsgBody(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addVersion(FlatBufferBuilder builder, long version) { builder.addInt(0, (int)version, (int)0L); }
  public static void addCommandId(FlatBufferBuilder builder, long commandId) { builder.addInt(1, (int)commandId, (int)0L); }
  public static void addContent(FlatBufferBuilder builder, int contentOffset) { builder.addOffset(2, contentOffset, 0); }
  public static int createContentVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startContentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endCommonMsgBody(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

