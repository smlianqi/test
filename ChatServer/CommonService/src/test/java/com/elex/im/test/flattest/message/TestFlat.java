// automatically generated by the FlatBuffers compiler, do not modify

package com.elex.im.test.flattest.message;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TestFlat extends Table {
  public static TestFlat getRootAsTestFlat(ByteBuffer _bb) { return getRootAsTestFlat(_bb, new TestFlat()); }
  public static TestFlat getRootAsTestFlat(ByteBuffer _bb, TestFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TestFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TestFlatBean testBean1() { return testBean1(new TestFlatBean()); }
  public TestFlatBean testBean1(TestFlatBean obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public TestFlatBean testBean2(int j) { return testBean2(new TestFlatBean(), j); }
  public TestFlatBean testBean2(TestFlatBean obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int testBean2Length() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createTestFlat(FlatBufferBuilder builder,
      int testBean1Offset,
      int testBean2Offset) {
    builder.startObject(2);
    TestFlat.addTestBean2(builder, testBean2Offset);
    TestFlat.addTestBean1(builder, testBean1Offset);
    return TestFlat.endTestFlat(builder);
  }

  public static void startTestFlat(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addTestBean1(FlatBufferBuilder builder, int testBean1Offset) { builder.addOffset(0, testBean1Offset, 0); }
  public static void addTestBean2(FlatBufferBuilder builder, int testBean2Offset) { builder.addOffset(1, testBean2Offset, 0); }
  public static int createTestBean2Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTestBean2Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTestFlat(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

