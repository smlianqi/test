// automatically generated by the FlatBuffers compiler, do not modify

package com.elex.im.test.net.message.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Test1Bean extends Table {
  public static Test1Bean getRootAsTest1Bean(ByteBuffer _bb) { return getRootAsTest1Bean(_bb, new Test1Bean()); }
  public static Test1Bean getRootAsTest1Bean(ByteBuffer _bb, Test1Bean obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Test1Bean __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String token() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tokenAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public long rid() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String userIdStr() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer userIdStrAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public long asid() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createTest1Bean(FlatBufferBuilder builder,
      int tokenOffset,
      long rid,
      int userIdStrOffset,
      long asid) {
    builder.startObject(4);
    Test1Bean.addAsid(builder, asid);
    Test1Bean.addUserIdStr(builder, userIdStrOffset);
    Test1Bean.addRid(builder, rid);
    Test1Bean.addToken(builder, tokenOffset);
    return Test1Bean.endTest1Bean(builder);
  }

  public static void startTest1Bean(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addToken(FlatBufferBuilder builder, int tokenOffset) { builder.addOffset(0, tokenOffset, 0); }
  public static void addRid(FlatBufferBuilder builder, long rid) { builder.addInt(1, (int)rid, (int)0L); }
  public static void addUserIdStr(FlatBufferBuilder builder, int userIdStrOffset) { builder.addOffset(2, userIdStrOffset, 0); }
  public static void addAsid(FlatBufferBuilder builder, long asid) { builder.addInt(3, (int)asid, (int)0L); }
  public static int endTest1Bean(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

