// automatically generated by the FlatBuffers compiler, do not modify

package com.elex.im.test.flattest.message;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TestFlatBean extends Table {
  public static TestFlatBean getRootAsTestFlatBean(ByteBuffer _bb) { return getRootAsTestFlatBean(_bb, new TestFlatBean()); }
  public static TestFlatBean getRootAsTestFlatBean(ByteBuffer _bb, TestFlatBean obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TestFlatBean __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String test1() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer test1AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public long test2() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String test3(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int test3Length() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public long test4(int j) { int o = __offset(10); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int test4Length() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer test4AsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public long test5(int j) { int o = __offset(12); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int test5Length() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer test5AsByteBuffer() { return __vector_as_bytebuffer(12, 8); }

  public static int createTestFlatBean(FlatBufferBuilder builder,
      int test1Offset,
      long test2,
      int test3Offset,
      int test4Offset,
      int test5Offset) {
    builder.startObject(5);
    TestFlatBean.addTest5(builder, test5Offset);
    TestFlatBean.addTest4(builder, test4Offset);
    TestFlatBean.addTest3(builder, test3Offset);
    TestFlatBean.addTest2(builder, test2);
    TestFlatBean.addTest1(builder, test1Offset);
    return TestFlatBean.endTestFlatBean(builder);
  }

  public static void startTestFlatBean(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addTest1(FlatBufferBuilder builder, int test1Offset) { builder.addOffset(0, test1Offset, 0); }
  public static void addTest2(FlatBufferBuilder builder, long test2) { builder.addInt(1, (int)test2, (int)0L); }
  public static void addTest3(FlatBufferBuilder builder, int test3Offset) { builder.addOffset(2, test3Offset, 0); }
  public static int createTest3Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTest3Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTest4(FlatBufferBuilder builder, int test4Offset) { builder.addOffset(3, test4Offset, 0); }
  public static int createTest4Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startTest4Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTest5(FlatBufferBuilder builder, int test5Offset) { builder.addOffset(4, test5Offset, 0); }
  public static int createTest5Vector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTest5Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endTestFlatBean(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

